/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Logins;

import static Logins.Login.temp;
import java.awt.HeadlessException;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author blotcanvas
 */
public class Student_sel extends javax.swing.JFrame {
    /**
     * Creates new form Student_sel
     */
    int avail1=60;
    int avail2=60;
    int day=0;
    String test="abc";
    String st;
    String temp;
    String user;
    String weekday;
    String room;
    String slot;
    int slot_time;
    String teacher;
    int modNum=0;
    public Student_sel() {
        initComponents();
        fillTeacher();
        Login log= new Login();
        temp=log.sendUser();
        user=temp.toUpperCase();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox_teacher = new javax.swing.JComboBox<>();
        jComboBox_slots = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel_available = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jComboBox_day = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel_time = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setText("Select Teacher");

        jLabel4.setText("Available slots");

        jComboBox_teacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_teacherActionPerformed(evt);
            }
        });

        jComboBox_slots.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_slotsActionPerformed(evt);
            }
        });

        jButton1.setText("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setText("Seats Available");

        jLabel_available.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_available.setText("-");

        jLabel7.setText("Select Day");

        jComboBox_day.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        jComboBox_day.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_dayActionPerformed(evt);
            }
        });

        jButton3.setText("Main Menu");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel8.setText("Slot Time");

        jLabel_time.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel_time.setText("-");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox_teacher, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox_day, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel4))
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel_available, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jComboBox_slots, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel_time, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(141, 141, 141))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox_teacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox_slots, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel_time))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel_available))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(42, 42, 42))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(59, 77, -1, 310));

        jLabel1.setFont(new java.awt.Font("Imprint MT Shadow", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 255, 255));
        jLabel1.setText("Student Selection Menu");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(153, 25, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon("/Users/blotcanvas/Downloads/simple-animated-geometric-background-with-squares-4k-ultra-high-definition-video-loop_hzhlwak8x_thumbnail-full01.png")); // NOI18N
        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 670, 420));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int check_flg=0;
        try{
            
                System.out.println(slot_time);
                if(avail1<=0 &&avail2<=0)
            {
                 jLabel_available.setText("");
                 JOptionPane.showMessageDialog(null,"This class is full!!","Select another teacher",JOptionPane.ERROR_MESSAGE);
            }
            String temp1=(String)jComboBox_day.getSelectedItem();
            weekday=temp1.toUpperCase();
            System.out.println(weekday);
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            java.sql.Connection con=DriverManager.getConnection("jdbc:derby://localhost:1527/Login_Credentials","admin_main","admin");
            java.sql.Statement stmt=con.createStatement();
            PreparedStatement ps;
            String st1="select * from ADMIN_MAIN.CREDENTIALS where USERNAME='"+user+"'";
            ResultSet rs2=stmt.executeQuery(st1);
            String fix=teacher+" "+room;
            if(rs2.next()){
            if("TUESDAY".equals(weekday))
            {
                switch (slot_time) {
                    case 1:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set TU1='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 2:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set TU2='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 3:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set TU3='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            check_flg=1;
                            break;
                        }
                    case 4:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set TU4='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 5:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set TU5='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 6:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set TU6='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 7:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set TU7='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            check_flg=1;
                            break;
                        }
                    case 8:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set TU8='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            check_flg=1;
                            break;
                        }
                    default:
                        break;
                }
            }
            if("WEDNESDAY".equals(weekday))
            {
                switch (slot_time) {
                    case 1:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set WE1='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            check_flg=1;
                            break;
                        }
                    case 2:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set WE2='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            check_flg=1;
                            break;
                        }
                    case 3:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set WE3='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 4:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set WE4='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 5:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set WE5='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 6:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set WE6='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 7:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set WE7='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 8:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set WE8='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    default:
                        break;
                }
            }
            if("THURSDAY".equals(weekday))
            {
                switch (slot_time) {
                    case 1:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set TH1='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 2:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set TH2='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 3:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set TH3='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 4:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set TH4='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 5:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set TH5='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 6:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set TH6='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 7:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set TH7='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 8:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set TH8='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    default:
                        break;
                }
            }
            if("FRIDAY".equals(weekday))
            {
                switch (slot_time) {
                    case 1:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set FR1='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 2:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set FR2='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 3:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set FR3='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 4:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set FR4='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 5:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set FR5='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 6:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set FR6='"+fix+"' where USRNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 7:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set FR7='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 8:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set FR8='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    default:
                        break;
                }
            }
            if("SATURDAY".equals(weekday))
            {
                switch (slot_time) {
                    case 1:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set SA1='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 2:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set SA2='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 3:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set SA3='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 4:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set SA4='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 5:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set SA5='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 6:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set SA6='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 7:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set SA7='"+fix+"' where USRNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    case 8:
                        {
                            ps=con.prepareStatement("update ADMIN_MAIN.CREDENTIALS set SA8='"+fix+"' where USERNAME='"+user+"'");
                            int x=ps.executeUpdate();
                            break;
                        }
                    default:
                        break;
                }
            }
        }
        String st="select * from ADMIN_MAIN.INFO1 where TEACHER='"+teacher+"'";
        ResultSet rs=stmt.executeQuery(st);
        modNum--;
        while(rs.next()){
            if("TUESDAY".equals(weekday) && "Slot 1".equals(slot))
            {
                    ps=con.prepareStatement("update ADMIN_MAIN.INFO1 set TU_SLOT1="+modNum+" where TEACHER='"+teacher+"'");
                    int x=ps.executeUpdate();
                    
            }
            else if("TUESDAY".equals(weekday) && "Slot 2".equals(slot))
            {
                    ps=con.prepareStatement("update ADMIN_MAIN.INFO1 set TU_SLOT2="+modNum+" where TEACHER='"+teacher+"'");
                    int x=ps.executeUpdate();
                    
            }
            else if("WEDNESDAY".equals(weekday) && "Slot 1".equals(slot))
            {
                    ps=con.prepareStatement("update ADMIN_MAIN.INFO1 set WE_SLOT1="+modNum+" where TEACHER='"+teacher+"'");
                    int x=ps.executeUpdate();
                    
            }
            else if("WEDNESDAY".equals(weekday) && "Slot 2".equals(slot))
            {
                    ps=con.prepareStatement("update ADMIN_MAIN.INFO1 set WE_SLOT2="+modNum+" where TEACHER='"+teacher+"'");
                    int x=ps.executeUpdate();
                    
            }
            else if("THURSDAY".equals(weekday) && "Slot 1".equals(slot))
            {
                    ps=con.prepareStatement("update ADMIN_MAIN.INFO1 set TH_SLOT1="+modNum+" where TEACHER='"+teacher+"'");
                    int x=ps.executeUpdate();
                    
            }
            else if("THURSDAY".equals(weekday) && "Slot 2".equals(slot))
            {
                    ps=con.prepareStatement("update ADMIN_MAIN.INFO1 set TH_SLOT2="+modNum+" where TEACHER='"+teacher+"'");
                    int x=ps.executeUpdate();
                    
            }
            else if("FRIDAY".equals(weekday) && "Slot 1".equals(slot))
            {
                    ps=con.prepareStatement("update ADMIN_MAIN.INFO1 set FR_SLOT1="+modNum+" where TEACHER='"+teacher+"'");
                    int x=ps.executeUpdate();
                    
            }
            else if("FRIDAY".equals(weekday) && "Slot 2".equals(slot))
            {
                    ps=con.prepareStatement("update ADMIN_MAIN.INFO1 set FR_SLOT2="+modNum+" where TEACHER='"+teacher+"'");
                    int x=ps.executeUpdate();
                    
            }
            else if("SATURDAY".equals(weekday) && "Slot 1".equals(slot))
            {
                    ps=con.prepareStatement("update ADMIN_MAIN.INFO1 set SA_SLOT1="+modNum+" where TEACHER='"+teacher+"'");
                    int x=ps.executeUpdate();
                    
            }
            else if("SATURDAY".equals(weekday) && "Slot 2".equals(slot))
            {
                    ps=con.prepareStatement("update ADMIN_MAIN.INFO1 set SA_SLOT2="+modNum+" where TEACHER='"+teacher+"'");
                    int x=ps.executeUpdate();
                    
            }
          }
        if(jLabel_time.getText()=="-"){
            JOptionPane.showMessageDialog(null,"Slot is not available yet !!","Denied!",JOptionPane.ERROR_MESSAGE);
        }
        else {
            JOptionPane.showMessageDialog(null,"Slot successfully booked !!","Success !!",JOptionPane.INFORMATION_MESSAGE);
        }
        }
        catch(HeadlessException | ClassNotFoundException | SQLException e){
           System.err.println(e);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox_slotsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_slotsActionPerformed
    Object selectedItem = jComboBox_slots.getSelectedItem();
    String selectedItemStr = null;
    if (selectedItem != null)
    {
        selectedItemStr = selectedItem.toString();
        slot=selectedItemStr;
    }
    if("Slot 1".equals(selectedItemStr)){
        jLabel_available.setText(String.valueOf(avail1));
        modNum=avail1;
    }
    else if("Slot 2".equals(selectedItemStr)){
        jLabel_available.setText(String.valueOf(avail2));
        modNum=avail2;
    }
    fillSlotTime();
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_slotsActionPerformed

    private void jComboBox_teacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_teacherActionPerformed
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_teacherActionPerformed

    private void jComboBox_dayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_dayActionPerformed
        day=jComboBox_day.getSelectedIndex();
        jComboBox_slots.removeAllItems();
        avail1=60;
        avail2=60;
        fillSlot();
        jLabel_available.setText("-");
        jLabel_time.setText("-");
// TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_dayActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        mainMenu obj=new mainMenu();
        obj.setVisible(true);
        setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void fillTeacher(){
        try{
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            java.sql.Connection con=DriverManager.getConnection("jdbc:derby://localhost:1527/Login_Credentials","admin_main","admin");
            java.sql.Statement stmt=con.createStatement();
            String DBQ="Select * from ADMIN_MAIN.INFO1";
            ResultSet rs=stmt.executeQuery(DBQ);
            while(rs.next()){
                String classes = rs.getString("TEACHER");
                jComboBox_teacher.addItem(classes);
            }
        }
        catch(HeadlessException | ClassNotFoundException | SQLException e){
           System.err.println(e);
        }
    }
    private void fillSlot(){
        try{
            String name=(String) jComboBox_teacher.getSelectedItem();
            //String day=(String) jComboBox_day.getSelectedItem();
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            java.sql.Connection con=DriverManager.getConnection("jdbc:derby://localhost:1527/Login_Credentials","admin_main","admin");
            java.sql.Statement stmt=con.createStatement();
            String DBQ="Select * from ADMIN_MAIN.INFO1";
            ResultSet rs=stmt.executeQuery(DBQ);
            st="select * from ADMIN_MAIN.INFO1 where TEACHER='"+name+"'";
            con.setAutoCommit(false);
            ResultSet rs1=stmt.executeQuery(st);
            if(rs1.next())
            {
             switch(day)
             {
                 case 0:
                  avail1=rs1.getInt("TU_SLOT1");  
                  avail2=rs1.getInt("TU_SLOT2");
                  break;
                  
                  case 1:
                  avail1=rs1.getInt("WE_SLOT1");  
                  avail2=rs1.getInt("WE_SLOT2");
                  break;
                  
                  case 2:
                  avail1=rs1.getInt("TH_SLOT1");  
                  avail2=rs1.getInt("TH_SLOT2");
                  break;
                  
                  case 3:
                  avail1=rs1.getInt("FR_SLOT1");  
                  avail2=rs1.getInt("FR_SLOT2");
                  break;
                  
                  case 4:
                  avail1=rs1.getInt("SA_SLOT1");  
                  avail2=rs1.getInt("SA_SLOT2");
                  break;
             }
            //jComboBox_slots.addItem(String.valueOf(temp));
            }
            if(avail1>0 || avail2>0)
            {
                if(avail1>0)
                {
                  jComboBox_slots.addItem("Slot 1"); 
                }
                if(avail2>0)
                  jComboBox_slots.addItem("Slot 2");
            }
        }
        catch(HeadlessException | ClassNotFoundException | SQLException e){
           System.err.println(e);
        }
    }
    
    private void fillSlotTime(){
        try{
            Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            java.sql.Connection con=DriverManager.getConnection("jdbc:derby://localhost:1527/Login_Credentials","admin_main","admin");
            java.sql.Statement stmt=con.createStatement();
            teacher=(String) jComboBox_teacher.getSelectedItem();
            String day_temp=(String) jComboBox_day.getSelectedItem();
            String weekday=day_temp.toUpperCase();
            System.out.println(weekday);
            System.out.println(slot);
            System.out.println(teacher);
            String DBQ="Select * from ADMIN_MAIN.INFO1 where TEACHER='"+teacher+"'";
            ResultSet rs=stmt.executeQuery(DBQ);
            while(rs.next()){
            if("TUESDAY".equals(weekday) && "Slot 1".equals(slot))
            {
                    slot_time = rs.getInt("TU_SLOT1_TIME");
                    room=rs.getString("TU_ROOM");
                    
            }
            else if("TUESDAY".equals(weekday) && "Slot 2".equals(slot))
            {
                    slot_time = rs.getInt("TU_SLOT2_TIME");
                    room=rs.getString("TU2_ROOM");
                    
            }
            else if("WEDNESDAY".equals(weekday) && "Slot 1".equals(slot))
            {
                    slot_time = rs.getInt("WE_SLOT1_TIME");
                    room=rs.getString("WE_ROOM");
                    
            }
            else if("WEDNESDAY".equals(weekday) && "Slot 2".equals(slot))
            {
                    slot_time = rs.getInt("WE_SLOT2_TIME");
                    room=rs.getString("WE2_ROOM");
                    
            }
            else if("THURSDAY".equals(weekday) && "Slot 1".equals(slot))
            {
                    slot_time = rs.getInt("TH_SLOT1_TIME");
                    room=rs.getString("TH_ROOM");
                    
            }
            else if("THURSDAY".equals(weekday) && "Slot 2".equals(slot))
            {
                    slot_time = rs.getInt("TH_SLOT2_TIME");
                    room=rs.getString("TH2_ROOM");
                    
            }
            else if("FRIDAY".equals(weekday) && "Slot 1".equals(slot))
            {
                    slot_time = rs.getInt("FR_SLOT1_TIME");
                    room=rs.getString("FR_ROOM");
                    
            }
            else if("FRIDAY".equals(weekday) && "Slot 2".equals(slot))
            {
                    slot_time = rs.getInt("FR_SLOT2_TIME");
                    room=rs.getString("FR2_ROOM");
                    
            }
            else if("SATURDAY".equals(weekday) && "Slot 1".equals(slot))
            {
                    slot_time = rs.getInt("SA_SLOT1_TIME");
                    room=rs.getString("SA_ROOM");
                    
            }
            else if("SATURDAY".equals(weekday) && "Slot 2".equals(slot))
            {
                    slot_time = rs.getInt("SA_SLOT2_TIME");
                    room=rs.getString("SA2_ROOM");
                    
            }
          }
          switch(slot_time){
                case 1:
                    jLabel_time.setText("9:00-9:50");
                    break;
                
                case 2:
                    jLabel_time.setText("9:50-10:40");
                    break;
                case 3:
                    jLabel_time.setText("10:55-11:45");
                    break;
                case 4:
                    jLabel_time.setText("11:45-12:35");
                    break;
                case 5:
                    jLabel_time.setText("1:30-2:20");
                    break;
                case 6:
                    jLabel_time.setText("2:20-3:10");
                    break;
                case 7:
                    jLabel_time.setText("3:25-4:15");
                    break;
                case 8:
                    jLabel_time.setText("4:15-5:05");
                    break;
                    
                default:
                    break;
          }
        }
        catch(HeadlessException | ClassNotFoundException | SQLException e){
           System.err.println(e);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Student_sel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Student_sel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Student_sel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Student_sel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Student_sel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox_day;
    private javax.swing.JComboBox<String> jComboBox_slots;
    private javax.swing.JComboBox<String> jComboBox_teacher;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel_available;
    private javax.swing.JLabel jLabel_time;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
